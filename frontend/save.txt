
 const submit = (e) => {
        e.preventDefault();
        let color = hexToRGB (colour, { format: "css" })
        box = { id, name, weight, colour: color, country }
        componentDidMount(box)
        alert("Added box successfully")
        setName("")
        setWeight("0")
        setColour("#000000")
        setCountry("1")
    }




import React, { useState } from 'react'
import 'bootstrap/dist/css/bootstrap.min.css';
import { useForm } from 'react-hook-form';
import hexToRGB  from '../../models/color_converter';
import {ChromePicker} from 'react-color';


export default function Form() {
  const { handleSubmit} = useForm();
  const [result, setResult] = useState("");
  const [color, setColor] = useState("");
  const [buttonText, setButtonText] = useState("Pick a Colour");
  const [showColorPicker, setShowColorPicker]= useState(false);
  const onSubmit = (data) =>{
    setResult(JSON.stringify(data));
    console.log(JSON.stringify({name: data.name, weight: data.weight, color: hexToRGB(color), country: data.country }));
    }
    const changeText = (text) => setButtonText(text);
    const onSelectingColor =(updatedColor) =>{
      setColor(updatedColor.hex)
      changeText("Colour Selected")
    }

 return (
  <form onSubmit={handleSubmit(onSubmit)}>
      <label>
    Name:
    <br/> <input {...register("name")} placeholder="name" /> 
  </label>
  <br/> <label>
    Weight:
    <br/> <input {...register("weight")} type="number" defaultValue="0" placeholder="weight in KG" /> 
  </label>
  <br/> <label>
    Colour:
    <br/> <div> 
    <button onClick={() => setShowColorPicker(showColorPicker => !showColorPicker)}>
    {buttonText}
    </button>
    {
      showColorPicker && (<ChromePicker color ={color} onChange = {updatedColor => onSelectingColor(updatedColor)}/>
      )}
    </div>
  </label>
  <br/> <label>
    Country:
    <br/> <select className="col-md-6" {...register("country")}>
        <option value="">Select Country...</option>
        <option value="Sweden">Sweden</option>
        <option value="China">China</option>
        <option value="Brazil">Brazil</option>
        <option value="Australia">Australia</option>
      </select> 
  </label> <br/>
    
      <p hidden>{result}</p>
      <br/><input type="submit" value="Save"/>
  </form>
);
}


import React, { useState } from 'react'
import 'bootstrap/dist/css/bootstrap.min.css';
import { useForm } from 'react-hook-form';
import hexToRGB  from '../../models/hex_converter';
import {ChromePicker} from 'react-color';
import isValidInput  from '../../models/InputValidator';

export default function Form() {
  const {register, handleSubmit} = useForm();
  const [result, setResult] = useState("");
  const [color, setColor] = useState("");
  const [buttonText, setButtonText] = useState("Pick a Colour");
  const [showColorPicker, setShowColorPicker]= useState(false);
  var name, country, weight;
  const onSubmit = (data) =>{
    name = data.name;
    weight = data.weight;
    country = data.country
    setResult(JSON.stringify(data));
    console.log(JSON.stringify({name: data.name, weight: data.weight, color: hexToRGB(color), country: data.country }));
    }

    const onSave = () =>{
      var rgb = hexToRGB(color);
    isValidInput(name,  country, rgb, weight)
    console.log("I am here")
    }
   
    const changeText = (text) => setButtonText(text);
    const onSelectingColor =(updatedColor) =>{
      setColor(updatedColor.hex)
      changeText("Colour Selected")
    }

 return (
  <form class="form-box" onSubmit={handleSubmit(onSubmit)}>
    <div className = "field1">
    <label>
    Name:
    <br/> <input {...register("name")} placeholder="name" /> 
  </label>
  <br/> <label>
    Weight:
    <br/> <input {...register("weight")} type="number" defaultValue="0" placeholder="weight in KG" /> 
  </label>
  <br/> <label>
    Colour:
    <br/> <div> 
    <button onClick={() => setShowColorPicker(showColorPicker => !showColorPicker)}>
    {buttonText}
    </button>
    {
      showColorPicker && (<ChromePicker color ={color} onChange = {updatedColor => onSelectingColor(updatedColor)}/>
      )}
    </div>
  </label>
  <br/> <label>
    Country:
    <br/> <select className="col-md-6" {...register("country")}>
        <option value="">Select Country...</option>
        <option value="Sweden">Sweden</option>
        <option value="China">China</option>
        <option value="Brazil">Brazil</option>
        <option value="Australia">Australia</option>
      </select> 
  </label> <br/>
      <p hidden>{result}</p>
      <br/><input onSubmit={() => onSave()} type="submit" value="Save"/>
    </div>
  </form>
);
}

if (bool === true || data === null || data.length === 0){
return (
  <section >
  <h1>There is no data in the database at this moment!</h1>
</section>
)
  } else {
    return (
      <div className="container">
        <table className="table table-bordered">
          <thead onClick={()=>sort("name")}>Receiver</thead>
          <thead onClick={()=>sort("weight")}>Weight</thead>
          <thead>Box Colour</thead>
          <thead onClick={()=>sort("colour")} >Country</thead>
          <tbody>
            {data.map((info)=>(
              <tr key ={info.id}>
                <td>{info.name}</td>
                <td>{info.weight}</td>
                <td>{info.colour}</td>
                <td>{info.country}</td>
              </tr>
            ))}
          </tbody>
        </table>
         </div>
    );
  }


  export default function List() {
  let data = []
  var setData
  [data, setData] = useState()
  var data2
  const [order, setOrder] = useState("ACS")
  Service.getAll().then((res) =>{
    this.state({data: res.data})
  }).then(() =>{
    Service.getSummary().then((res2) =>{
      this.state({data2: res2.data})
    })
  })
  const sort = (col) =>{
    var sorted = sorter(data, col, order)
    setData(sorted.getData())
    setOrder(sorted.getNextOrder())
  }

  if (data === null){
    return (
      <section className="sec2">
      <h1>There is no data in the database at this moment!</h1>
    </section>
    )
      } else {
        return (
          <div className="con">
            <h1>List Of Disbatches</h1>
            <table className="zigzag">
            <tbody>
            <th className="header"onClick={()=>sort("name")}>Receiver</th>
              <th className="header"onClick={()=>sort("weight")}>Cost</th>
              <th className="header" >Box Color</th>
              <th className="header" onClick={()=>sort("cost")} ></th>
            </tbody>
              <tbody>
                {data.map((info)=>(
                  <tr key ={info.id}>
                    <td>{info.name}</td>
                    <td>{info.weight}</td>
                    <td>{info.colour}</td>
                    <td>{info.cost}</td>
                  </tr>
                ))}
              </tbody>
            </table>
            <h1>Summary</h1>
            <table className="zigzag">
            <tbody>
            <th className="header"> Total Shipping Cost</th>
              <th className="header">Total Shipping Weight</th>
            </tbody>
              <tbody>
                  <tr >
                    <td>{data2.totalCost} SEK</td>
                    <td>{data2.totalWeight} KG</td>
                  </tr>
              </tbody>
            </table>
             </div>
        );
      }
}

import{render, screen} from '@testing-library/react'
import ListboxesComponent from '../src/components/Listboxes/ListBoxesComponent'
test('The columns should show the info', ()=>{
render(<ListboxesComponent boxes={[{name: 'Jacob', color: '#9c0e9c', weight: 1.2, cost: '30'}]}/>)
expect(screen.findAllByRole('th', {name:/nameCol/i}))
})





    <div className="con">
              <h1>List Of Disbatches</h1>
              <table className="zigzag">
              <tbody>
              <th className="header"onClick={()=>this.sort("name")}>Receiver</th>
                <th className="header"onClick={()=>this.sort("cost")}>Cost</th>
                <th  className="header">Box Color</th>
                <th className="header" onClick={()=>this.sort("weight")} >Weight</th>
              </tbody>
                <tbody>
                  {this.state.boxes.map((info)=>(
                    <tr key ={info.id}>
                      <td data-testid="nameCol">{info.name}</td>
                      <td data-testid="costCol">{info.cost}</td>
                      <td data-testid="colorCol"style={{backgroundColor: info.color}}></td>
                      <td name="weightCol">{info.weight}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
              <h1>Summary</h1>
              <table className="zigzag">
              <tbody>
              <th name="totalCostCol" className="header"> Total Shipping Cost</th>
                <th name="totalWeightCol" className="header">Total Shipping Weight</th>
              </tbody>
                <tbody>
                    <tr >
                      <td>{this.state.summary.totalCost} SEK</td>
                      <td>{this.state.summary.totalWeight} KG</td>
                    </tr>
                </tbody>
              </table>
               </div>

.con{
 margin-top: 100px;
 margin-left: 20px;
 margin-bottom: 20px;
}
h1 {
    color: linear-gradient(45deg, rgb(156, 14, 156), midnightblue);
    font-family:'Times New Roman', Times, serif;
    margin-bottom: 0;
  }
  
  table {
    font-family: sans-serif;
    width: 50%;
  }
  table th,
  table td {
    padding: 0.25em 0.5em;
    text-align: left;
  }
  table th:nth-child(2),
  table td:nth-child(2) {
    text-align: right;
  }
  table td {
    background-color: #eee;
  }
  table th {
    background-color: #009;
    color: #fff;
  }

  .header3{
    color: red;
  }
  
  .zigzag {
    border-collapse: separate;
    border-spacing: 0.25em 1em;
  }
  .zigzag tbody tr:nth-child(odd) {
    transform: rotate(2deg);
  }
  .zigzag thead tr,
  .zigzag tbody tr:nth-child(even) {
    transform: rotate(-2deg);
  }


 <label >Colour:</label><br />
          <input type="color" id="color" name="color"
            value={colour} onChange={(e) => setColour(e.target.value)}></input><br />
          </div><br />
export default function Form() {
    let [name, setName] = useState("")
    let [weight, setWeight] = useState("")
    let [colour, setColour] = useState("#000000")
    let [country, setCountry] = useState("")

    const onSubmit = (e) => {
        e.preventDefault();
    
        try {
          
            isValidInput(name,  country, colour, weight)
            let data = { name: name.toUpperCase(), weight, color: colour, country: country.toUpperCase() }
        
            setName("")
            setWeight("0")
            setColour("#000000")
            setCountry("")
        } catch (err) {
            toast.error(err.message, {hideProgressBar: true});
        }
    }

    return (
        <section className="sec2" onSubmit={onSubmit}>
          <div className="sec3">
          <h2>The Required Info</h2>
          <form>
          <label >Name:</label><br />
          <input type="text" id="name" name="name" placeholder="name" value={name} onChange={(e) => setName(e.target.value)}></input><br />
          <label >Weight:</label><br />
          <input type="number" id="number" name="weight" placeholder="weight in KG" value={weight} onChange={(e) => setWeight(e.target.value)}></input><br />
          <label className="label1">Select a colour:</label><br />
          <div className="color">
          
          <Color/>
          </div><br />
          <div >
          <label >Country:</label><br></br>
                <select className="select" id="slct" value={country} onChange={(e) => setCountry(e.target.value)}>
                <option value="">Select a country</option>
                    <option value="Sweden">Sweden</option>
                    <option value="China">China</option>
                    <option value="Brazil">Brazil</option>
                    <option value="Australia">Australia</option>
                </select>
            </div><br />
            <input type="submit" value="Save"></input> <br />
          </form>
          </div>
          <ToastContainer />
        </section>
    );
}


 <BrowserRouter forceRefresh>
      <div className="App">
     <Header/>
        <Switch>
            <Route exact path='/' ><Form/></Route>
            <Route exact path='#/addbox' ><Form/></Route>
            <Route exact path='#/listboxes' ><ListBoxes/></Route>
            <Route path="*"  ><Error/></Route>
          </Switch>
      </div>
    </BrowserRouter>












    import React from 'react';
import Form from './components/Form/FormComponent';
import ListBoxes from './components/Listboxes/ListBoxesComponent';
import Header from './components/Navbar/Navbar';
import Error from './components/PageNotFound/PageNotFound';
import { BrowserRouter, Switch, Route} from "react-router-dom";
import configureStore from './store/store'
import { Provider } from 'react-redux'
const store = configureStore()
function App() {
  return (
 
      <Provider store={store}>
      <BrowserRouter forceRefresh>
    <div className="App">
   <Header/>
      <Switch>
          <Route exact path='/' ><Form/></Route>
          <Route  path='/addbox' ><Form/></Route>
          <Route  path='/listboxes' ><ListBoxes/></Route>
          <Route path="*"  ><Error/></Route>
        </Switch>
    </div>
  </BrowserRouter>
      </Provider>
  )
}

export default App;



import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { history } from './store/store'

ReactDOM.render(
  <React.Fragment>
    <App history={history}/>
  </React.Fragment>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
